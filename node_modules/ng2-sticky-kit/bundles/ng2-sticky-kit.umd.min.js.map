{"version":3,"file":"ng2-sticky-kit.umd.min.js","sources":["../../out-tsc/lib/src/component/sticky.component.ts","../../out-tsc/lib/src/module.ts"],"sourcesContent":["import {Component, ElementRef, Input, Output, EventEmitter, OnInit, AfterViewInit, HostListener} from '@angular/core';\n\n@Component({\n    selector: 'sticky,[sticky]',\n    template: '<ng-content></ng-content>'\n})\nexport class StickyComponent implements OnInit, AfterViewInit {\n\n    @Input('sticky') sticky: string;\n    @Input('sticky-zIndex') zIndex: number = 10;\n    @Input('sticky-width') width: string = 'auto';\n    @Input('sticky-offset-top') offsetTop: number = 0;\n    @Input('sticky-offset-bottom') offsetBottom: number = 0;\n    @Input('sticky-start') start: number = 0;\n    @Input('sticky-class') stickClass: string = 'sticky';\n    @Input('sticky-end-class') endStickClass: string = 'sticky-end';\n    @Input('sticky-media-query') mediaQuery: string = '';\n    @Input('sticky-parent') parentMode: boolean = true;\n    @Input('sticky-orientation') orientation: string = 'none';\n\n    @Output() activated = new EventEmitter();\n    @Output() deactivated = new EventEmitter();\n    @Output() reset = new EventEmitter();\n\n    isStuck: boolean = false;\n\n    private elem: any;\n    private container: any;\n    private originalCss: any;\n\n    private windowHeight: number;\n    private containerHeight: number;\n    private elemHeight: number;\n    private containerStart: number;\n    private scrollFinish: number;\n\n    constructor(private element: ElementRef) { }\n\n    ngOnInit(): void {\n        this.elem = this.element.nativeElement;\n    }\n\n    ngAfterViewInit(): void {\n        // define scroll container as parent element\n        this.container = this.elem.parentNode;\n        this.defineOriginalDimensions();\n        this.sticker();\n    }\n\n    @HostListener('window:scroll', ['$event'])\n    @HostListener('window:resize', ['$event'])\n    @HostListener('window:orientationchange', ['$event'])\n    onChange(): void {\n        this.sticker();\n    }\n\n    defineOriginalDimensions(): void {\n        this.originalCss = {\n            zIndex: this.getCssValue(this.elem, 'zIndex'),\n            position: this.getCssValue(this.elem, 'position'),\n            top: this.getCssValue(this.elem, 'top'),\n            right: this.getCssValue(this.elem, 'right'),\n            left: this.getCssValue(this.elem, 'left'),\n            bottom: this.getCssValue(this.elem, 'bottom'),\n            width: this.getCssValue(this.elem, 'width'),\n        };\n\n        if (this.width === 'auto') {\n            this.width = this.originalCss.width;\n        }\n    }\n\n    defineDimensions(): void {\n        let containerTop: number = this.getBoundingClientRectValue(this.container, 'top');\n        this.windowHeight = window.innerHeight;\n        this.elemHeight = this.getCssNumber(this.elem, 'height');\n        this.containerHeight = this.getCssNumber(this.container, 'height');\n        this.containerStart = containerTop + this.scrollbarYPos() - this.offsetTop + this.start;\n        if (this.parentMode) {\n            this.scrollFinish = this.containerStart - this.start - this.offsetBottom + (this.containerHeight - this.elemHeight);\n        } else {\n            this.scrollFinish = document.body.offsetHeight;\n        }\n    }\n\n    resetElement(): void {\n        this.elem.classList.remove(this.stickClass);\n        Object.assign(this.elem.style, this.originalCss);\n\n        this.reset.next(this.elem);\n    }\n\n    stuckElement(): void {\n        this.isStuck = true;\n\n        this.elem.classList.remove(this.endStickClass);\n        this.elem.classList.add(this.stickClass);\n\n        Object.assign(this.elem.style, {\n            zIndex: this.zIndex,\n            position: 'fixed',\n            top: this.offsetTop + 'px',\n            right: 'auto',\n            bottom: 'auto',\n            left: this.getBoundingClientRectValue(this.elem, 'left') + 'px',\n            width: this.getCssValue(this.elem, 'width')\n        });\n\n        this.activated.next(this.elem);\n    }\n\n    unstuckElement(): void {\n        this.isStuck = false;\n\n        this.elem.classList.add(this.endStickClass);\n\n        this.container.style.position = 'relative';\n\n        Object.assign(this.elem.style, {\n            position: 'absolute',\n            top: 'auto',\n            left: 'auto',\n            right: this.getCssValue(this.elem, 'float') === 'right' || this.orientation === 'right' ? 0 : 'auto',\n            bottom: this.offsetBottom + 'px',\n            width: this.getCssValue(this.elem, 'width')\n        });\n\n        this.deactivated.next(this.elem);\n    }\n\n    matchMediaQuery(): any {\n        if (!this.mediaQuery) return true;\n        return (\n            window.matchMedia('(' + this.mediaQuery + ')').matches ||\n            window.matchMedia(this.mediaQuery).matches\n        );\n    }\n\n    sticker(): void {\n\n        // check media query\n        if (this.isStuck && !this.matchMediaQuery()) {\n            this.resetElement();\n            return;\n        }\n\n        // detecting when a container's height changes\n        let currentContainerHeight: number = this.getCssNumber(this.container, 'height');\n        if (currentContainerHeight !== this.containerHeight) {\n            this.defineDimensions();\n        }\n\n        // check if the sticky element is above the container\n        if (this.elemHeight >= currentContainerHeight) {\n          return;\n        }\n\n        let position: number = this.scrollbarYPos();\n\n        // unstick\n        if (this.isStuck && (position < this.containerStart || position > this.scrollFinish) || position > this.scrollFinish) {\n            this.resetElement();\n            if (position > this.scrollFinish) this.unstuckElement();\n            this.isStuck = false;\n        }\n        // stick\n        else if (position > this.containerStart && position < this.scrollFinish) {\n            this.stuckElement();\n        }\n    }\n\n    private scrollbarYPos(): number {\n        return window.pageYOffset || document.documentElement.scrollTop;\n    }\n\n    private getBoundingClientRectValue(element: any, property: string): number {\n        let result = 0;\n        if (element && element.getBoundingClientRect) {\n            let rect = element.getBoundingClientRect();\n            result = (typeof rect[property] !== 'undefined') ? rect[property] : 0;\n        }\n        return result;\n    }\n\n    private getCssValue(element: any, property: string): any {\n        let result: any = '';\n        if (typeof window.getComputedStyle !== 'undefined') {\n            result = window.getComputedStyle(element, '').getPropertyValue(property);\n        }\n        else if (typeof element.currentStyle !== 'undefined')  {\n            result = element.currentStyle[property];\n        }\n        return result;\n    }\n\n    private getCssNumber(element: any, property: string): number {\n        if (typeof element === 'undefined') return 0;\n        return parseInt(this.getCssValue(element, property), 10) || 0;\n    }\n}\n","import { NgModule } from '@angular/core';\n\nimport { StickyComponent } from './component/sticky.component';\n\n@NgModule({\n  declarations: [StickyComponent],\n  exports: [StickyComponent]\n})\nexport class StickyModule { }\n"],"names":["element","this","EventEmitter","StickyComponent","elem","nativeElement","container","parentNode","defineOriginalDimensions","sticker","originalCss","zIndex","getCssValue","position","top","right","left","bottom","width","containerTop","getBoundingClientRectValue","windowHeight","window","innerHeight","elemHeight","getCssNumber","containerHeight","containerStart","scrollbarYPos","offsetTop","start","parentMode","scrollFinish","offsetBottom","document","body","offsetHeight","classList","remove","stickClass","Object","assign","style","reset","next","isStuck","endStickClass","add","activated","orientation","deactivated","mediaQuery","matchMedia","matches","matchMediaQuery","currentContainerHeight","defineDimensions","resetElement","unstuckElement","stuckElement","pageYOffset","documentElement","scrollTop","property","result","getBoundingClientRect","rect","getComputedStyle","getPropertyValue","currentStyle","parseInt","Component","selector","template","ElementRef","Input","Output","HostListener","NgModule","declarations","exports"],"mappings":"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"}