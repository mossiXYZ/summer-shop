(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :
	(factory((global.ngxFooterReveal = global.ngxFooterReveal || {}),global.ng.core));
}(this, (function (exports,_angular_core) { 'use strict';

var __assign = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgxFooterRevealDirective = (function () {
    function NgxFooterRevealDirective(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.prev = this.el.nativeElement.previousElementSibling;
        this.defaults = new Object();
        this.settings = new Object();
    }
    /**
     * @return {?}
     */
    NgxFooterRevealDirective.prototype.initialize = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ presets = {
            shadow: this.shadow == null ? true : this.shadow,
            shadowOpacity: this.shadowOpacity == null ? 0.8 : this.shadowOpacity,
            zIndex: this.zIndex == null ? -100 : this.zIndex
        };
        if (this.options == null) {
            this.options = new Object();
        }
        this.defaults = __assign({}, presets, this.options);
        this.settings = __assign({ height: this.height == null ? 0 : this.height, width: this.width == null ? 0 : this.width }, this.defaults, this.options);
    };
    /**
     * @return {?}
     */
    NgxFooterRevealDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initialize();
        this.setMarginAndWidth();
        if (this.el.nativeElement.offsetHeight <= window.outerHeight &&
            this.el.nativeElement.offsetTop >= window.outerHeight) {
            this.renderer.setElementStyle(this.el.nativeElement, 'z-index', this.defaults.zIndex.toString());
            this.renderer.setElementStyle(this.el.nativeElement, 'position', 'fixed');
            this.renderer.setElementStyle(this.el.nativeElement, 'bottom', '0');
            if (this.defaults.shadow) {
                this.renderer.setElementStyle(this.prev, 'moz-box-shadow', '0 20px 30px -20px rgba(0,0,0,' + this.defaults.shadowOpacity + ')');
                this.renderer.setElementStyle(this.prev, '-webkit-box-shadow', '0 20px 30px -20px rgba(0,0,0,' + this.defaults.shadowOpacity + ')');
                this.renderer.setElementStyle(this.prev, 'box-shadow', '0 20px 30px -20px rgba(0,0,0,' + this.defaults.shadowOpacity + ')');
            }
        }
    };
    /**
     * @return {?}
     */
    NgxFooterRevealDirective.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (this.width === 0 || this.height === 0) {
            this.setMarginAndWidth();
        }
    };
    /**
     * @return {?}
     */
    NgxFooterRevealDirective.prototype.onWindowLoad = /**
     * @return {?}
     */
    function () {
        this.setMarginAndWidth();
    };
    /**
     * @return {?}
     */
    NgxFooterRevealDirective.prototype.setMarginAndWidth = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ height = this.el.nativeElement.offsetHeight;
        var /** @type {?} */ width = this.prev.offsetWidth;
        this.settings.height = height && height > 0 ? height : this.settings.height;
        this.settings.width = width && width > 0 ? width : this.settings.width;
        this.renderer.setElementStyle(this.el.nativeElement, 'width', this.settings.width.toString() + 'px');
        this.renderer.setElementStyle(this.prev, 'margin-bottom', this.settings.height.toString() + 'px');
    };
    NgxFooterRevealDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: "[ngxFooterReveal]"
                },] },
    ];
    /** @nocollapse */
    NgxFooterRevealDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
        { type: _angular_core.Renderer, },
    ]; };
    NgxFooterRevealDirective.propDecorators = {
        "options": [{ type: _angular_core.Input, args: ['options',] },],
        "shadow": [{ type: _angular_core.Input, args: ['shadow',] },],
        "shadowOpacity": [{ type: _angular_core.Input, args: ['shadowOpacity',] },],
        "zIndex": [{ type: _angular_core.Input, args: ['zIndex',] },],
        "height": [{ type: _angular_core.Input, args: ['height',] },],
        "width": [{ type: _angular_core.Input, args: ['width',] },],
        "onWindowLoad": [{ type: _angular_core.HostListener, args: ['window:resize',] }, { type: _angular_core.HostListener, args: ['footerRevealResize',] },],
    };
    return NgxFooterRevealDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgxFooterRevealModule = (function () {
    function NgxFooterRevealModule() {
    }
    NgxFooterRevealModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    declarations: [NgxFooterRevealDirective],
                    exports: [NgxFooterRevealDirective]
                },] },
    ];
    return NgxFooterRevealModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

exports.NgxFooterRevealDirective = NgxFooterRevealDirective;
exports.NgxFooterRevealModule = NgxFooterRevealModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-footer-reveal.umd.js.map
