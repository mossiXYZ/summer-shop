import { Directive, ElementRef, HostListener, Input, NgModule, Renderer } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgxFooterRevealDirective {
    /**
     * @param {?} el
     * @param {?} renderer
     */
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.prev = this.el.nativeElement.previousElementSibling;
        this.defaults = new Object();
        this.settings = new Object();
    }
    /**
     * @return {?}
     */
    initialize() {
        let /** @type {?} */ presets = {
            shadow: this.shadow == null ? true : this.shadow,
            shadowOpacity: this.shadowOpacity == null ? 0.8 : this.shadowOpacity,
            zIndex: this.zIndex == null ? -100 : this.zIndex
        };
        if (this.options == null) {
            this.options = new Object();
        }
        this.defaults = Object.assign({}, presets, this.options);
        this.settings = Object.assign({ height: this.height == null ? 0 : this.height, width: this.width == null ? 0 : this.width }, this.defaults, this.options);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initialize();
        this.setMarginAndWidth();
        if (this.el.nativeElement.offsetHeight <= window.outerHeight &&
            this.el.nativeElement.offsetTop >= window.outerHeight) {
            this.renderer.setElementStyle(this.el.nativeElement, 'z-index', this.defaults.zIndex.toString());
            this.renderer.setElementStyle(this.el.nativeElement, 'position', 'fixed');
            this.renderer.setElementStyle(this.el.nativeElement, 'bottom', '0');
            if (this.defaults.shadow) {
                this.renderer.setElementStyle(this.prev, 'moz-box-shadow', '0 20px 30px -20px rgba(0,0,0,' + this.defaults.shadowOpacity + ')');
                this.renderer.setElementStyle(this.prev, '-webkit-box-shadow', '0 20px 30px -20px rgba(0,0,0,' + this.defaults.shadowOpacity + ')');
                this.renderer.setElementStyle(this.prev, 'box-shadow', '0 20px 30px -20px rgba(0,0,0,' + this.defaults.shadowOpacity + ')');
            }
        }
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        if (this.width === 0 || this.height === 0) {
            this.setMarginAndWidth();
        }
    }
    /**
     * @return {?}
     */
    onWindowLoad() {
        this.setMarginAndWidth();
    }
    /**
     * @return {?}
     */
    setMarginAndWidth() {
        let /** @type {?} */ height = this.el.nativeElement.offsetHeight;
        let /** @type {?} */ width = this.prev.offsetWidth;
        this.settings.height = height && height > 0 ? height : this.settings.height;
        this.settings.width = width && width > 0 ? width : this.settings.width;
        this.renderer.setElementStyle(this.el.nativeElement, 'width', this.settings.width.toString() + 'px');
        this.renderer.setElementStyle(this.prev, 'margin-bottom', this.settings.height.toString() + 'px');
    }
}
NgxFooterRevealDirective.decorators = [
    { type: Directive, args: [{
                selector: "[ngxFooterReveal]"
            },] },
];
/** @nocollapse */
NgxFooterRevealDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer, },
];
NgxFooterRevealDirective.propDecorators = {
    "options": [{ type: Input, args: ['options',] },],
    "shadow": [{ type: Input, args: ['shadow',] },],
    "shadowOpacity": [{ type: Input, args: ['shadowOpacity',] },],
    "zIndex": [{ type: Input, args: ['zIndex',] },],
    "height": [{ type: Input, args: ['height',] },],
    "width": [{ type: Input, args: ['width',] },],
    "onWindowLoad": [{ type: HostListener, args: ['window:resize',] }, { type: HostListener, args: ['footerRevealResize',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgxFooterRevealModule {
}
NgxFooterRevealModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NgxFooterRevealDirective],
                exports: [NgxFooterRevealDirective]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { NgxFooterRevealDirective, NgxFooterRevealModule };
//# sourceMappingURL=ngx-footer-reveal.js.map
