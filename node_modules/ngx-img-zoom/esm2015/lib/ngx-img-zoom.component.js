/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Renderer2, ElementRef, ViewChild, Input } from '@angular/core';
import { NgxImgZoomService } from './ngx-img-zoom.service';
export class NgxImgZoomComponent {
    /**
     * @param {?} renderer
     * @param {?} ngxZoomService
     */
    constructor(renderer, ngxZoomService) {
        this.renderer = renderer;
        this.ngxZoomService = ngxZoomService;
        this.hide = true;
        this._triggerAnimationIn = false;
        this.notFirstTime = false;
        this.zoomMode = this.ngxZoomService.zoomMode;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set _imgSrc(val) {
        this.zoomImage = val;
        if (this.notFirstTime === true) {
            this.renderer.setStyle(this.result, 'backgroundImage', "url('" + val + "')");
        }
        this.notFirstTime = true;
        // this.renderer.setStyle(this.result, 'backgroundImage', val);
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set _zoomImage(val) {
        this.previewImage = val;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.img = this.imgElmRef.nativeElement;
        this.result = this.resultElmRef.nativeElement;
        this.container = this.containerElmRef.nativeElement;
        this.renderer.setAttribute(this.img, 'style', (/** @type {?} */ (this.imgStyle)));
        this.renderer.setAttribute(this.result, 'style', (/** @type {?} */ (this.resultStyle)));
        this.renderer.setAttribute(this.container, 'style', (/** @type {?} */ (this.containerStyle)));
        this.imageZoom();
        this.renderer.setStyle(this.lens, 'visibility', 'hidden');
    }
    /**
     * @return {?}
     */
    imageZoom() {
        /*create lens:*/
        this.lens = this.renderer.createElement('DIV');
        this.renderer.addClass(this.lens, 'img-zoom-lens');
        this.renderer.setAttribute(this.lens, 'style', (/** @type {?} */ (this.lensStyle)));
        /*insert lens:*/
        this.renderer.insertBefore(this.img.parentElement, this.lens, this.img);
        /*calculate the ratio between result DIV and lens:*/
        this.cx = this.result.offsetWidth / this.lens.offsetWidth;
        this.cy = this.result.offsetHeight / this.lens.offsetHeight;
        /*set background properties for the result DIV:*/
        this.renderer.setStyle(this.result, 'backgroundImage', "url('" + this.zoomImage + "')");
        this.renderer.setStyle(this.result, 'backgroundSize', (this.img.width * this.cx) + 'px ' + (this.img.height * this.cy) + 'px');
        // this.renderer.setStyle(this.img.parentElement, 'position', 'relative')
        /*execute a function when someone moves the cursor over the image, or the lens:*/
        this.renderer.listen(this.lens, 'mousemove', this.moveLens.bind(this));
        this.renderer.listen(this.img, 'mousemove', this.moveLens.bind(this));
        /*and also for touch screens:*/
        this.renderer.listen(this.img, 'touchmove', this.moveLens.bind(this));
        this.renderer.listen(this.lens, 'touchmove', this.moveLens.bind(this));
    }
    /**
     * @param {?} e
     * @return {?}
     */
    moveLens(e) {
        /** @type {?} */
        let pos;
        /** @type {?} */
        let x;
        /** @type {?} */
        let y;
        /*prevent any other actions that may occur when moving over the image:*/
        e.preventDefault();
        /*get the cursor's x and y positions:*/
        pos = this.getCursorPos(e);
        /*calculate the position of the lens:*/
        x = pos.x - (this.lens.offsetWidth / 2);
        y = pos.y - (this.lens.offsetHeight / 2);
        /*prevent the lens from being positioned outside the image:*/
        if (x > this.img.width - this.lens.offsetWidth) {
            x = this.img.width - this.lens.offsetWidth;
            this.hide = true;
            this.renderer.setStyle(this.lens, 'visibility', 'hidden');
        }
        else {
            this.hide = false;
            this.renderer.setStyle(this.lens, 'visibility', 'visible');
        }
        if (x < 0) {
            x = 0;
            this.hide = true;
            this.renderer.setStyle(this.lens, 'visibility', 'hidden');
        }
        if (y > this.img.height - this.lens.offsetHeight) {
            y = this.img.height - this.lens.offsetHeight;
            this.hide = true;
            this.renderer.setStyle(this.lens, 'visibility', 'hidden');
        }
        if (y < 0) {
            y = 0;
            this.hide = true;
            this.renderer.setStyle(this.lens, 'visibility', 'hidden');
        }
        /*set the position of the lens:*/
        this.renderer.setStyle(this.lens, 'left', x + 'px');
        this.renderer.setStyle(this.lens, 'top', y + 'px');
        /*display what the lens 'sees':*/
        this.renderer.setStyle(this.result, 'backgroundPosition', '-' + (x * this.cx) + 'px -' + (y * this.cy) + 'px');
    }
    /**
     * @param {?} e
     * @return {?}
     */
    getCursorPos(e) {
        /** @type {?} */
        let a;
        /** @type {?} */
        let x = 0;
        /** @type {?} */
        let y = 0;
        e = e || window.event;
        /*get the x and y positions of the image:*/
        a = this.img.getBoundingClientRect();
        /*calculate the cursor's x and y coordinates, relative to the image:*/
        x = e.pageX - a.left;
        y = e.pageY - a.top;
        /*consider any page scrolling:*/
        x = x - window.pageXOffset;
        y = y - window.pageYOffset;
        return { x: x, y: y };
    }
    /**
     * @return {?}
     */
    handleMouseLeave() {
        this.hide = true;
        this.renderer.setStyle(this.lens, 'visibility', 'hidden');
    }
}
NgxImgZoomComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-img-zoom',
                template: "<div  class=\"img-zoom-container\" #container>\n    <img id=\"myimage\" [src]=\"previewImage\" #img (mouseleave)=\"handleMouseLeave()\">\n    <div  [ngClass]=\"{'hide': hide}\" \n        id=\"myresult\" \n        class=\"img-zoom-result\" \n        #result>\n    </div>\n</div>  ",
                styles: ["*{box-sizing:border-box}.img-zoom-container{position:absolute}.img-zoom-lens{position:absolute;border:1px solid #d4d4d4;width:40px;height:40px}.img-zoom-result{border:1px solid #d4d4d4;width:300px;height:300px}.hide{visibility:hidden}"]
            }] }
];
/** @nocollapse */
NgxImgZoomComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: NgxImgZoomService }
];
NgxImgZoomComponent.propDecorators = {
    imgElmRef: [{ type: ViewChild, args: ['img',] }],
    resultElmRef: [{ type: ViewChild, args: ['result',] }],
    containerElmRef: [{ type: ViewChild, args: ['container',] }],
    imgStyle: [{ type: Input }],
    resultStyle: [{ type: Input }],
    lensStyle: [{ type: Input }],
    containerStyle: [{ type: Input }],
    _imgSrc: [{ type: Input, args: ['zoomImageSrc',] }],
    _zoomImage: [{ type: Input, args: ['previewImageSrc',] }]
};
if (false) {
    /** @type {?} */
    NgxImgZoomComponent.prototype.img;
    /** @type {?} */
    NgxImgZoomComponent.prototype.lens;
    /** @type {?} */
    NgxImgZoomComponent.prototype.result;
    /** @type {?} */
    NgxImgZoomComponent.prototype.cx;
    /** @type {?} */
    NgxImgZoomComponent.prototype.cy;
    /** @type {?} */
    NgxImgZoomComponent.prototype.container;
    /** @type {?} */
    NgxImgZoomComponent.prototype.hide;
    /** @type {?} */
    NgxImgZoomComponent.prototype._triggerAnimationIn;
    /** @type {?} */
    NgxImgZoomComponent.prototype.notFirstTime;
    /** @type {?} */
    NgxImgZoomComponent.prototype.zoomMode;
    /** @type {?} */
    NgxImgZoomComponent.prototype.imgElmRef;
    /** @type {?} */
    NgxImgZoomComponent.prototype.resultElmRef;
    /** @type {?} */
    NgxImgZoomComponent.prototype.containerElmRef;
    /** @type {?} */
    NgxImgZoomComponent.prototype.imgStyle;
    /** @type {?} */
    NgxImgZoomComponent.prototype.resultStyle;
    /** @type {?} */
    NgxImgZoomComponent.prototype.lensStyle;
    /** @type {?} */
    NgxImgZoomComponent.prototype.containerStyle;
    /** @type {?} */
    NgxImgZoomComponent.prototype.zoomImage;
    /** @type {?} */
    NgxImgZoomComponent.prototype.previewImage;
    /**
     * @type {?}
     * @private
     */
    NgxImgZoomComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    NgxImgZoomComponent.prototype.ngxZoomService;
}
//# sourceMappingURL=data:application/json;base64,